name: Release to Maven Central

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  release:
    name: Release to Maven Central
    runs-on: ubuntu-latest
    environment: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: main
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        
    - name: Configure Git user
      run: |
        git config --global user.email "474256+sshaaf@users.noreply.github.com"
        git config --global user.name "sshaaf"
        
    - name: Prepare release version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          RELEASE_VERSION="${{ github.event.inputs.version }}"
        else
          RELEASE_VERSION="${{ github.event.release.tag_name }}"
          RELEASE_VERSION=${RELEASE_VERSION#v}
        fi
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
        echo "Releasing version: $RELEASE_VERSION"
        
    - name: Update version in pom.xml
      run: |
        echo "Current branch: $(git branch --show-current)"
        mvn versions:set -DnewVersion=${{ env.RELEASE_VERSION }} -DgenerateBackupPoms=false
        git add pom.xml
        git commit -m "Release version ${{ env.RELEASE_VERSION }}" || echo "No changes to commit"
        
    - name: Run tests
      run: mvn clean test -B
      
    - name: Build artifacts for Central Portal
      run: |
        # Build and sign artifacts but don't deploy yet
        mvn clean install -P release -B -Dgpg.skip=false
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        
    - name: Upload to Central Portal
      run: |
        # Create bundle for Central Portal upload with Maven directory structure and checksums
        cd target
        
        # Create Maven directory structure
        MAVEN_DIR="dev/shaaf/jgraphlet/jgraphlet/${{ env.RELEASE_VERSION }}"
        mkdir -p "$MAVEN_DIR"
        
        # Copy files to Maven structure
        cp jgraphlet-${{ env.RELEASE_VERSION }}.jar "$MAVEN_DIR/"
        cp jgraphlet-${{ env.RELEASE_VERSION }}.pom "$MAVEN_DIR/"
        cp jgraphlet-${{ env.RELEASE_VERSION }}-sources.jar "$MAVEN_DIR/"
        cp jgraphlet-${{ env.RELEASE_VERSION }}-javadoc.jar "$MAVEN_DIR/"
        cp jgraphlet-${{ env.RELEASE_VERSION }}.jar.asc "$MAVEN_DIR/"
        cp jgraphlet-${{ env.RELEASE_VERSION }}.pom.asc "$MAVEN_DIR/"
        cp jgraphlet-${{ env.RELEASE_VERSION }}-sources.jar.asc "$MAVEN_DIR/"
        cp jgraphlet-${{ env.RELEASE_VERSION }}-javadoc.jar.asc "$MAVEN_DIR/"
        
        # Generate required checksums (md5 and sha1) for each file
        cd "$MAVEN_DIR"
        for file in *.jar *.pom; do
          md5sum "$file" | cut -d' ' -f1 > "$file.md5"
          sha1sum "$file" | cut -d' ' -f1 > "$file.sha1"
        done
        cd ../../../../../
        
        # Create bundle with proper structure
        zip -r ../jgraphlet-${{ env.RELEASE_VERSION }}-bundle.jar dev/
        cd ..
        
        # Upload bundle to Central Portal
        curl -v \
          -u "${{ secrets.OSSRH_USERNAME }}:${{ secrets.OSSRH_TOKEN }}" \
          -F "bundle=@jgraphlet-${{ env.RELEASE_VERSION }}-bundle.jar" \
          "https://central.sonatype.com/api/v1/publisher/upload"
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        
    - name: Create Git tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          git tag -a "v${{ env.RELEASE_VERSION }}" -m "Release version ${{ env.RELEASE_VERSION }}"
          git push origin "v${{ env.RELEASE_VERSION }}"
        else
          echo "Tag v${{ env.RELEASE_VERSION }} already exists from GitHub release"
        fi
        
    - name: Prepare next development version
      run: |
        NEXT_VERSION=$(echo ${{ env.RELEASE_VERSION }} | awk -F. '{$NF = $NF + 1; print}' OFS=.)
        mvn versions:set -DnewVersion=${NEXT_VERSION}-SNAPSHOT -DgenerateBackupPoms=false
        git add pom.xml
        git commit -m "Prepare next development version ${NEXT_VERSION}-SNAPSHOT" || echo "No changes to commit"
        git push origin main || echo "Push failed, continuing..."
