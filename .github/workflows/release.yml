name: Release to Maven Central

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  release:
    name: Release to Maven Central
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        
    - name: Configure Git user
      run: |
        git config --global user.email "shaaf@hey.com"
        git config --global user.name "sshaaf"
        
    - name: Prepare release version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          RELEASE_VERSION="${{ github.event.inputs.version }}"
        else
          RELEASE_VERSION="${{ github.event.release.tag_name }}"
          RELEASE_VERSION=${RELEASE_VERSION#v}
        fi
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
        echo "Releasing version: $RELEASE_VERSION"
        
    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ env.RELEASE_VERSION }} -DgenerateBackupPoms=false
        git add pom.xml
        git commit -m "Release version ${{ env.RELEASE_VERSION }}"
        
    - name: Run tests
      run: mvn clean test -B
      
    - name: Build and deploy to Maven Central
      run: mvn clean deploy -P release -B
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        
    - name: Create Git tag
      run: |
        git tag -a "v${{ env.RELEASE_VERSION }}" -m "Release version ${{ env.RELEASE_VERSION }}"
        git push origin "v${{ env.RELEASE_VERSION }}"
        
    - name: Prepare next development version
      run: |
        NEXT_VERSION=$(echo ${{ env.RELEASE_VERSION }} | awk -F. '{$NF = $NF + 1; print}' OFS=.)
        mvn versions:set -DnewVersion=${NEXT_VERSION}-SNAPSHOT -DgenerateBackupPoms=false
        git add pom.xml
        git commit -m "Prepare next development version ${NEXT_VERSION}-SNAPSHOT"
        git push origin main
