name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering for testing

jobs:
  test:
    name: Test on ${{ matrix.os }} with Java ${{ matrix.java-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        java-version: [ '17', '21' ]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: maven
        
    - name: Run tests
      run: mvn clean test -B
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-java-${{ matrix.java-version }}
        path: target/surefire-reports/
        retention-days: 7

  package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Package project
      run: mvn clean package -B
      
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: jgraphlet-jar
        path: target/jgraphlet-*.jar
        retention-days: 30

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Run Maven verify
      run: mvn clean verify -B
      
    - name: Check code quality
      run: |
        echo "üîç Performing code quality checks..."
        
        # Check for TODO/FIXME comments
        echo "üìù Checking for TODO/FIXME comments..."
        TODO_FILES=$(find src/ -name "*.java" -exec grep -l "TODO\|FIXME" {} \; 2>/dev/null | head -5)
        if [ -n "$TODO_FILES" ]; then
          echo "‚ÑπÔ∏è  Found TODO/FIXME comments (consider addressing them)"
          echo "$TODO_FILES"
        else
          echo "‚úÖ No TODO/FIXME comments found"
        fi
        
        # Check for System.out.println in main code
        echo "üñ®Ô∏è  Checking for System.out.println usage..."
        PRINTLN_FILES=$(find src/main/ -name "*.java" -exec grep -l "System\.out\.println" {} \; 2>/dev/null)
        if [ -n "$PRINTLN_FILES" ]; then
          echo "‚ö†Ô∏è  Found System.out.println in main code - consider using proper logging"
          echo "$PRINTLN_FILES"
        else
          echo "‚úÖ No System.out.println found in main code"
        fi
        
        # Verify thread-safety tests run successfully
        echo "üßµ Verifying thread-safety tests..."
        mvn test -Dtest=TaskPipelineThreadSafetyTest -q
        if [ $? -eq 0 ]; then
          echo "‚úÖ Thread-safety tests passed"
        else
          echo "‚ùå Thread-safety tests failed"
          exit 1
        fi
        
        echo "‚úÖ Code quality checks completed"

  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Validate PR
      run: |
        echo "üîç Validating Pull Request..."
        
        # Run all tests to ensure nothing is broken
        mvn clean test -B
        
        # Ensure package builds successfully
        mvn package -B -DskipTests
        
        # Check that README examples are still valid
        echo "üìñ Checking README examples..."
        if grep -q "try (TaskPipeline pipeline" README.md; then
          echo "‚úÖ README contains AutoCloseable examples"
        else
          echo "‚ö†Ô∏è  README might need AutoCloseable examples"
        fi
        
        echo "‚úÖ PR validation completed"